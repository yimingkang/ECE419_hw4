import org.apache.zookeeper.KeeperException;
import org.apache.zookeeper.WatchedEvent;
import org.apache.zookeeper.Watcher;
import org.apache.zookeeper.Watcher.Event.KeeperState;
import org.apache.zookeeper.ZooKeeper;
import org.apache.zookeeper.ZooKeeper.States;
import org.apache.zookeeper.CreateMode;
import org.apache.zookeeper.ZooDefs.Ids;
import org.apache.zookeeper.data.ACL;
import org.apache.zookeeper.data.Stat;

import java.util.concurrent.CountDownLatch;
import java.util.logging.Logger;
import java.util.List;
import java.io.IOException;

public class ZkConnector implements Watcher {

    // ZooKeeper Object
    ZooKeeper zooKeeper;

    // To block any operation until ZooKeeper is connected. It's initialized
    // with count 1, that is, ZooKeeper connect state.
    CountDownLatch connectedSignal = new CountDownLatch(1);
    
    protected static final List<ACL> acl = Ids.OPEN_ACL_UNSAFE;
    
    
    // Logger
	private static final Logger logger = Logger.getLogger(ZkConnector.class.getName());

    /**
     * Connects to ZooKeeper servers specified by hosts.
     */
    public void connect(String hosts) throws IOException, InterruptedException {

        zooKeeper = new ZooKeeper(
                hosts, // ZooKeeper service hosts
                5000,  // Session timeout in milliseconds
                this); // watches -- this class implements Watcher; events are handled by the process method
	    connectedSignal.await();
    }

    /**
     * Closes connection with ZooKeeper
     */
    public void close() throws InterruptedException {
	    zooKeeper.close();
    }

    /**
     * @return the zooKeeper
     */
    public ZooKeeper getZooKeeper() {
        // Verify ZooKeeper's validity
        if (null == zooKeeper || !zooKeeper.getState().equals(States.CONNECTED)) {
	        throw new IllegalStateException ("ZooKeeper is not connected.");
        }
        return zooKeeper;
    }

    public void process(WatchedEvent event) {
        // check if event is for connection done; if so, unblock main thread blocked in connect
        if (event.getState() == KeeperState.SyncConnected) {
            connectedSignal.countDown();
        }
    }
    
    protected Stat exists(String path, Watcher watch) {

        Stat stat =null;
        try {
            stat = zooKeeper.exists(path, watch);
        } catch(Exception e) {
        }

        return stat;
    }
    
    
    protected List<String> getChildren(String path, Watcher watch){
    	List<String> children = null;
        try {
        	children = zooKeeper.getChildren(path, watch);
        } catch(Exception e) {
        }

        return children;
    }
    
    protected byte[] getData(String path, Stat stat){
    	byte[] data = null;
    	
    	if (stat == null){
    		// too lazy to check API
    		// just in case if null makes zookeeper upset
    		stat = new Stat();
    	}
    	
    	try {
			data = zooKeeper.getData(path, false, stat);
		} catch (KeeperException e) {
			logger.info("Unable to get data because: " + e.code().toString());
			return data;
		} catch (InterruptedException e) {
			logger.severe("Hopeless error -- exiting");
			e.printStackTrace();
			System.exit(-1);
		}
    	return data;
    }
    
    protected void setData(String path, byte[] data, int version){
    	try {
			zooKeeper.setData(path, data, version);
		} catch (KeeperException e) {
			logger.info("Unable to set data because: " + e.code().toString());
		} catch (InterruptedException e) {
			logger.severe("Hopeless error -- exiting");
			e.printStackTrace();
			System.exit(-1);
		}
    }
    
    protected void delete(String path, int version){
    	try {
			zooKeeper.delete(path, version);
		} catch (InterruptedException e) {
			logger.severe("Hopeless error -- exiting");
			e.printStackTrace();
			System.exit(-1);
		} catch (KeeperException e) {
			logger.info("Node already deleted/version mismatch: " + e.code().toString());
		}
    }
    
    protected String createWorker(String path){
    	try {
			return zooKeeper.create(
					path, 
					null,  
					Ids.OPEN_ACL_UNSAFE, 
					CreateMode.PERSISTENT_SEQUENTIAL
			);
		} catch (KeeperException e) {
			return null;
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			System.exit(-1);
		}
    	return null;
    }
    
    protected KeeperException.Code create(String path, String data, CreateMode mode) {

        try {
            byte[] byteData = null;
            if(data != null) {
                byteData = data.getBytes();
            }
            zooKeeper.create(path, byteData, acl, mode);

        } catch(KeeperException e) {
            return e.code();
        } catch(Exception e) {
            return KeeperException.Code.SYSTEMERROR;
        }

        return KeeperException.Code.OK;
    }
}

