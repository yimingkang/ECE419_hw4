import org.apache.zookeeper.KeeperException;
import org.apache.zookeeper.KeeperException.NodeExistsException;
import org.apache.zookeeper.Watcher.Event.EventType;
import org.apache.zookeeper.WatchedEvent;
import org.apache.zookeeper.Watcher;
import org.apache.zookeeper.ZooKeeper;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.concurrent.CountDownLatch;
import java.util.logging.Logger;
//import java.util.logging.Level;
//import org.apache.log4j.*;
import org.apache.zookeeper.CreateMode;
import org.apache.zookeeper.ZooDefs.Ids;

public class JobTracker extends PBArchitecture {
    public static String jobPath = "/Jobs";
	private static int nPartitions = 27;
	public static boolean MOCK = true;	

    public static void main(String[] args) throws IOException, ClassNotFoundException {
    	
        myPath = "/JobTracker";
    	
        if (args.length != 1) {
            System.out.println("Usage: java -classpath lib/zookeeper-3.3.2.jar:lib/log4j-1.2.15.jar:. A zkServer:clientPort");
            return;
        }

        ZkConnector zkc = new ZkConnector();
        
        try {
            zkc.connect(args[0]);
        } catch(Exception e) {
            logger.info("Zookeeper connect "+ e.getMessage());
        }

        zk = zkc.getZooKeeper();
        
        createBaseZNode();
        affirmPrimary();
        
    	ServerSocket serverSocket = new ServerSocket(8888);
    	if (MOCK){
    		createJob("ABCDEFG");
    	}
    	
        while (true){
        	Socket clientSocket = serverSocket.accept();
        	ObjectInputStream reader = new ObjectInputStream(clientSocket.getInputStream());
        	String md5_hash = (String) reader.readObject();
        	logger.info("Connected to a user with MD5 hash: " + md5_hash);
        	// here we need to process the job
        	createJob(md5_hash);
        	
        	// TODO: tell user the job has been submitted
        	clientSocket.close();
        }
        
    }
    

    
    public static void createBaseZNode(){
    	// we would like to first create /Jobs node
		try {
			zk.create(
			        jobPath,         	    // Path of znode
			        null,   // Status is CREATED
			        Ids.OPEN_ACL_UNSAFE,    // ACL, set to Completely Open.
			        CreateMode.PERSISTENT   // Znode type, set to EPHEMERAL for failure detection
			);
			logger.info("Created node " + jobPath);
		} catch (KeeperException | InterruptedException e) {
			logger.info("Node " + jobPath + " already exists");
		}
    }
    
    public static void createJob(String md5Hash){
		for (int partitionID = 0; partitionID < nPartitions; partitionID++){
	        try {
	        	
	        	// create N jobs under /<jobPath>/<md5_hash>_<partitionID>
	        	String md5Path = jobPath + "/" + md5Hash + "_" + partitionID;
	        	logger.info("Creating node at " + md5Path);
				zk.create(
				        md5Path,         	    // Path of znode
				        "CREATED".getBytes(),   // Status is CREATED
				        Ids.OPEN_ACL_UNSAFE,    // ACL, set to Completely Open.
				        CreateMode.PERSISTENT   // Znode type, set to EPHEMERAL for failure detection
				);
			} catch (NodeExistsException e) {
				logger.info("Job " + md5Hash + " already exists! -- aborting");
				break;
			} catch(KeeperException | InterruptedException e){
				logger.severe("ZooKeeper error: " + e.getMessage());
				System.exit(-1);
			}
		}
    }
    
    
}
