import java.util.logging.Logger;

import org.apache.zookeeper.WatchedEvent;
import org.apache.zookeeper.Watcher;
import org.apache.zookeeper.ZooKeeper;
import org.apache.zookeeper.data.Stat;
import org.apache.zookeeper.Watcher.Event.EventType;

public class Worker {
    public static String jobPath = "/Jobs";
    public static String workerPath = "/Workers";
    public static ZooKeeper zk;
    public static ZkConnector zkc;
    private static Watcher workerWatcher;
    
	private static final Logger logger = Logger.getLogger(Worker.class.getName());
	
	public static void main(String[] args){
        if (args.length != 1) {
            System.out.println("Usage: java -classpath lib/zookeeper-3.3.2.jar:lib/log4j-1.2.15.jar:. A zkServer:clientPort");
            return;
        }

        zkc = new ZkConnector();
        
        try {
            zkc.connect(args[0]);
        } catch(Exception e) {
            logger.info("Zookeeper connect "+ e.getMessage());
        }

        zk = zkc.getZooKeeper();
        
        /* 1- Make connection to zookeeper (already done)
         * 2- Set a Watch for /Workers node to handle worker failure
         * 3- On worker failure => use setData() on worker's current task to signal that 
         * 	  we need to re-process this task
         * 4- Loop through all tasks and work on it if it needs to be done (use setData() with version
         *    number to achieve atomic operation similar to test-and-set)
         */
        
        // Set a watcher on WORKERS
        workerWatcher = new Watcher() { // Anonymous Watcher
            @Override
            public void process(WatchedEvent event) {
                workerHandler(event);
        
            }
        };
        watchWorkers();
	}
	
	private static void watchWorkers(){
        Stat workerStat = zkc.exists(workerPath, workerWatcher);
        if (workerStat == null){
        	logger.severe("Worker node " + workerPath + " is not set, should be set to PERSISTENT");
        	System.exit(-1);
        }
	}
	
	private static void workerHandler(WatchedEvent event){
        String path = event.getPath();
        EventType type = event.getType();
        
        if(path.equalsIgnoreCase(workerPath)) {
            if (type == EventType.NodeDeleted) {
                System.out.println(myPath + " deleted! Let's go!");       
                checkpath(); // try to become the boss
            }
            if (type == EventType.NodeCreated) {
            	logger.severe("New node crreated under " + workerPath + ", re-enable watcher");
            }
        }
	}

}
